/*
 Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
*/

//Time complexity: O(N)
//Space complexity: O(H) where H is height of binary tree

class Solution {
    int answer=INT_MIN;
    vector<int> solve(TreeNode* node){
        if(node==NULL){
              return {INT_MAX,INT_MIN,0};
          }
         vector< int> leftsolve=solve(node->left);
         vector< int> rightsolve=solve(node->right);

         
         if(leftsolve[1]>=node->val|| rightsolve[0]<=node->val)
         {
             return {INT_MIN,INT_MAX,0};
             }
        int res=leftsolve[2]+rightsolve[2]+node->val;
         answer=max(answer,res);

         return {min(node->val,leftsolve[0]),max(rightsolve[1],node->val),res};
    }
public:
    int maxSumBST(TreeNode* root) {
        vector<int>ans=solve(root);
        if(answer<0) return 0;
        return answer;
    }
};
