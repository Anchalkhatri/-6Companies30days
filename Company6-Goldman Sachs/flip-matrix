/*
  There is an m x n binary grid matrix with all the values set 0 initially. Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.

Optimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.

Implement the Solution class:

Solution(int m, int n) Initializes the object with the size of the binary matrix m and n.
int[] flip() Returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1.
void reset() Resets all the values of the matrix to be 0.
*/


//Time complexity: O(1)
//Space complexity: O(1)


class Solution {
public:
    int n,m;
    int i = 0,j = 0;
    Solution(int m, int n) {
        this->n = n;
        this->m = m;
    }
    
    vector<int> flip() {
        int I = i, J = j; // for returning purpose
        if(j + 1 < n) j++; // will iterate over columns till we can
        else if(i + 1 < m){ // will switch to next row and first col
            i++;
            j = 0;
        }
        else i = 0,j = 0; // will point back to first row and col
        // work as reset and continue to cycle again
        return {I,J};
    }
    
    void reset() {
        
    }
};
